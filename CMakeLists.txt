# Minimum version of CMake required
cmake_minimum_required(VERSION 3.10)

# Project name
project(Kodetron VERSION 0.1.0)

# Enable C++17 standard or higher
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Find Qt modules
find_package(Qt6 COMPONENTS Widgets REQUIRED)

# If using Qt6, set up the module paths
if (TARGET Qt6::Widgets)
    qt_standard_project_setup() # Sets up includes, defines for Qt6
    # Optional: Enable C++ standard if not already done by qt_standard_project_setup()
    # target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_17)
endif()

# Find Boost
# You might need to specify BOOST_ROOT if Boost is not in a standard location
# Example: set(BOOST_ROOT "/path/to/your/boost_1_80_0")
set(BOOST_ROOT "C:/Boost/Libraries")
find_package(Boost 1.88 COMPONENTS system filesystem REQUIRED)

# Add include directories
include_directories(${Boost_INCLUDE_DIRS})

# Add your source files
add_executable(${PROJECT_NAME} src/main.cpp)

# Link Qt libraries
if (TARGET Qt6::Widgets)
    target_link_libraries(${PROJECT_NAME} PRIVATE Qt6::Widgets)
    # Qt6 also needs to set rpath for executables for deployment
    # set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_RPATH_USE_LINK_PATH}")
    # set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
endif()
# For Qt5:
# target_link_libraries(${PROJECT_NAME} PRIVATE Qt5::Widgets)


# Link Boost libraries
target_link_libraries(${PROJECT_NAME} PRIVATE ${Boost_LIBRARIES})

# If you have UI files (.ui) generated by Qt Designer:
# qt_wrap_ui(${PROJECT_NAME}_SOURCES src/mainwindow.ui) # For Qt6
# qt5_wrap_ui(${PROJECT_NAME}_SOURCES src/mainwindow.ui) # For Qt5
# add_executable(${PROJECT_NAME} ${${PROJECT_NAME}_SOURCES})